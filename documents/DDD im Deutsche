### Domain Driven Design (DDD) auf Deutsch erklärt:

**Domain Driven Design (DDD)** ist ein Design-Ansatz für die Entwicklung von komplexen Softwareprojekten. Es wurde von Eric Evans in seinem Buch "Domain-Driven Design: Tackling Complexity in the Heart of Software" eingeführt.

#### Schlüsselkonzepte von DDD:

1. **Domänenmodell:**
   - Im Zentrum von DDD steht das Domänenmodell, das die Struktur und das Verhalten des Systems basierend auf der realen Domäne repräsentiert.
   - Es umfasst Entitäten, Value Objects, Aggregate Roots, Repositories und Services.

2. **Bounded Context:**
   - DDD empfiehlt die Aufteilung einer Anwendung in begrenzte Kontexte (Bounded Contexts), um klare Abgrenzungen zwischen verschiedenen Teilen des Systems zu schaffen.
   - Ein Bounded Context definiert klar, wie bestimmte Begriffe und Modelle in diesem Kontext verwendet werden.

3. **Aggregates und Aggregate Roots:**
   - Aggregates sind Gruppen von zusammengehörigen Entitäten und Value Objects, die als atomare Einheiten behandelt werden.
   - Ein Aggregate Root ist die einzige Entität innerhalb eines Aggregats, die von außerhalb des Aggregats referenziert werden kann.

4. **Repositories:**
   - Repositories dienen dazu, den Zugriff auf Entitäten zu abstrahieren und zu kapseln.
   - Sie bieten Methoden, um Entitäten nach ID oder anderen Kriterien zu suchen und zu speichern.

5. **Services:**
   - Services beinhalten domänenübergreifende Logik, die nicht in eine bestimmte Entität oder Value Object gehört.

### Pro und Contra von DDD:

#### Pro:

1. **Besseres Verständnis der Domäne:**
   - DDD fördert ein tiefes Verständnis der realen Domäne, was zu besserem Design und klareren Kommunikationsprozessen zwischen Entwicklern und Fachexperten führt.

2. **Klar strukturierte Architektur:**
   - Durch die Verwendung von Bounded Contexts, Aggregates und klaren Schnittstellen wird die Architektur des Systems besser strukturiert und skalierbar.

3. **Flexible Anpassung an Änderungen:**
   - DDD erleichtert die Anpassung an sich ändernde Anforderungen, da das System auf einer klaren Domänenlogik basiert.

#### Contra:

1. **Einarbeitungszeit:**
   - DDD erfordert oft eine Einarbeitungszeit, um die Konzepte vollständig zu verstehen und effektiv anzuwenden.

2. **Overhead für kleine Projekte:**
   - In kleineren Projekten kann der Overhead von DDD möglicherweise als unnötig empfunden werden.

### Beispiel mit PHP:

Angenommen, wir haben eine einfache Domäne für ein Online-Shop-System:

```php
// Entity
class Product {
    private $id;
    private $name;
    private $price;

    // Methods...
}

// Aggregate Root
class ShoppingCart {
    private $id;
    private $items = []; // Collection of Product entities

    // Methods...
}

// Service
class PriceCalculatorService {
    public function calculateTotal(ShoppingCart $cart): float {
        // Logic to calculate the total price of items in the shopping cart
    }
}

// Repository
class ProductRepository {
    public function findById(int $productId): ?Product {
        // Logic to find a product by ID
    }

    // Other methods...
}
```

In diesem Beispiel repräsentiert `Product` eine Entität, `ShoppingCart` ein Aggregate Root, `PriceCalculatorService` einen Service und `ProductRepository` ein Repository. Diese Klassen bilden das Fundament des Domänenmodells.

Leider kann ich hier keine Diagramme direkt einfügen, aber ich kann Ihnen beschreiben, wie Sie sich ein Klassendiagramm selbst erstellen können. Sie können dann ein UML-Diagramm-Tool Ihrer Wahl verwenden, um es zu visualisieren. Hier ist die Struktur des Klassendiagramms:

### Klassendiagramm:

1. **Product-Klasse:**
   - Attribute:
     - `id: int`
     - `name: string`
     - `price: float`

2. **ShoppingCart-Klasse:**
   - Attribute:
     - `id: int`
     - `items: array`
   - Methoden:
     - `__construct(id: int)`
     - `addItem(product: Product, quantity: int)`

3. **PriceCalculatorService-Klasse:**
   - Methoden:
     - `calculateTotal(cart: ShoppingCart): float`

4. **ProductRepository-Klasse:**
   - Attribute:
     - `products: array`
   - Methoden:
     - `__construct()`
     - `findById(productId: int): ?Product`

### Beziehungen:

- **Product-Klasse:**
  - Keine Beziehungen zu anderen Klassen.

- **ShoppingCart-Klasse:**
  - Assoziation zu `Product`: 1..* (Ein Warenkorb kann mehrere Produkte enthalten).

- **PriceCalculatorService-Klasse:**
  - Abhängigkeit von `ShoppingCart` und `Product`: Der Service benötigt diese Klassen, um den Gesamtpreis zu berechnen.

- **ProductRepository-Klasse:**
  - Keine direkten Beziehungen zu anderen Klassen, repräsentiert jedoch den Zugriff auf `Product`.

### Hinweise zur Darstellung:

- **Assoziationen:**
  - Eine einfache Linie mit einem Pfeil von `ShoppingCart` zu `Product`.

- **Abhängigkeiten:**
  - Eine gestrichelte Linie mit einem Pfeil von `PriceCalculatorService` zu `ShoppingCart` und `Product`.

### Visuelle Darstellung:

- `Product`                   [id: int, name: string, price: float]
- `ShoppingCart`              [id: int, items: array]
  - `addItem(product: Product, quantity: int)`
- `PriceCalculatorService`
  - `calculateTotal(cart: ShoppingCart): float`
- `ProductRepository`         [products: array]
  - `findById(productId: int): ?Product`

Erstellen Sie ein ähnliches Diagramm in einem UML-Diagramm-Tool Ihrer Wahl, um die Struktur und Beziehungen visuell zu erfassen. Beachten Sie, dass dies eine vereinfachte Darstellung ist, und in der Praxis können weitere Details und Beziehungen hinzugefügt werden.

Natürlich, hier ist eine vereinfachte textuelle Darstellung des Domänenmodells mit den dazugehörigen Entitäten und deren Beziehungen:

### Domänenmodell:

```
+-------------------------+
|        OnlineShop       |
+-------------------------+
| - products: ProductRepo |
| - cart: ShoppingCart    |
| - calculator: PriceCalc |
+-------------------------+

```

### Angehörigkeiten:

```
+-------------------------+      +------------------------+
|        ProductRepo      |      |      ShoppingCart      |
+-------------------------+      +------------------------+
| - products: array       |      | - id: int               |
|                         |      | - items: array           |
| + findById(productId)   |      |                        |
+-------------------------+      | + addItem(product, qty) |
                                +------------------------+
                                          |
                                          |
                                +------------------------+
                                |    PriceCalculator    |
                                +------------------------+
                                |                        |
                                | + calculateTotal(cart) |
                                +------------------------+
```

In diesem vereinfachten Modell repräsentiert `OnlineShop` die übergeordnete Domäne. Dieser enthält ein Produktrepository (`ProductRepo`), einen Einkaufswagen (`ShoppingCart`) und einen Preisrechner (`PriceCalculator`). Die Angehörigkeiten sind durch Linien verbunden und zeigen die Beziehungen zwischen den verschiedenen Elementen der Domäne an.

